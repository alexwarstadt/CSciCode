;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname reverse) (read-case-sensitive #t) (teachpacks ((lib "cs17.ss" "installed-teachpacks"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "cs17.ss" "installed-teachpacks")))))
;; double-map : (listof datum) (datum datum -> datum) -> listof datum
;; I/P : a list of data with an even number of elements, alod; 
;; a two argument procedure, proc, which takes input of the type in alod
;; O/P : a list containing the result of applying proc to each consecutive pair of elements in alod
(define (double-map alod proc)
  (cond
    ((empty? alod) empty)
    ((cons? (rest alod)) (cons (proc (first alod) (first (rest alod)))
                               (double-map (rest (rest alod)) proc)))
    ((empty? (rest alod)) (make-error "alod must have an even number of elements"))))
;; testing
(check-expect (double-map (list 1 2 3 4 5 6) +) (list 3 7 11))
(check-expect (double-map empty string-append) empty)
(check-expect (double-map (list 1 3 9 8 3 3) <) (list true false false))
(check-error (double-map (list 1 2 3 4 6) +) "error: alod must have an even number of elements")




;; alt-reverse
;; (listof datum) -> (listof datum)
;; I/P : a list of data with length equal to a power of two, alod
;; O/P : a list containing all the elements of alod in reverse order
(define (alt-reverse alod)
  ;; alt-reverse-helper
  ;; (list of (list of datum)) -> list of datum
  ;; I/P : a list of lists of data
  (local ((define alt-reverse-helper (lambda (alol) 
                       (cond
                         ((empty? alod) empty)
                         ((empty? (rest alol)) (first alol))
                         ((cons? (rest alol)) (alt-reverse-helper (double-map alol (lambda (x y) (append y x)))))))))
          (alt-reverse-helper (map (lambda (x) (list x)) alod))))
;; testing
(check-expect (alt-reverse (list 1 2 3 4 5 6 7 8)) (list 8 7 6 5 4 3 2 1))
(check-expect (alt-reverse (list "a" "b" "c" "d" "e" "f" "g" "h")) (list "h" "g" "f" "e" "d" "c" "b" "a"))
(check-expect (alt-reverse (list (list 1) (list 2 3) (list 7) (list 9 8 7 6))) 
              (list (list 9 8 7 6) (list 7) (list 2 3) (list 1)))
(check-expect (alt-reverse empty) empty)